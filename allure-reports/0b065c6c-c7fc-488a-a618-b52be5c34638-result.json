{"name": "test_sub_learn_chapters", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (170, 550). Other element would receive the click: <iframe frameborder=\"0\" allowfullscreen=\"\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" title=\"WHAT IS PHYSICS?\" width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/Y-NQOJ3Uz4w?autoplay=0&amp;mute=0&amp;controls=1&amp;origin=https%3A%2F%2Fwww.embibe.com&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;iv_load_policy=3&amp;modestbranding=1&amp;enablejsapi=1&amp;widgetid=1&amp;forigin=https%3A%2F%2Fwww.embibe.com%2Flearn%2Fsummary%2F606c4f964a9cbc2ab676048b%3Flearnmap_id%3D606ad10b3d96fbb0f3ee070e%252FManipur%2BBoard%252F11th%2BManipur%2BBoard%252FPhysics%252FMechanics%252FPhysical%2BWorld&amp;aoriginsup=1&amp;vf=6\" id=\"widget2\" data-gtm-yt-inspected-14=\"true\"></iframe>\n  (Session info: chrome=135.0.7049.115)\nStacktrace:\n0   chromedriver                        0x000000010278aa54 cxxbridge1$str$ptr + 2803960\n1   chromedriver                        0x0000000102782cf0 cxxbridge1$str$ptr + 2771860\n2   chromedriver                        0x00000001022ce864 cxxbridge1$string$len + 93028\n3   chromedriver                        0x000000010231af3c cxxbridge1$string$len + 406076\n4   chromedriver                        0x00000001023194a8 cxxbridge1$string$len + 399272\n5   chromedriver                        0x00000001023172bc cxxbridge1$string$len + 390588\n6   chromedriver                        0x00000001023166b8 cxxbridge1$string$len + 387512\n7   chromedriver                        0x000000010230b01c cxxbridge1$string$len + 340764\n8   chromedriver                        0x000000010230aaa8 cxxbridge1$string$len + 339368\n9   chromedriver                        0x0000000102356480 cxxbridge1$string$len + 649088\n10  chromedriver                        0x00000001023097ec cxxbridge1$string$len + 334572\n11  chromedriver                        0x000000010274fccc cxxbridge1$str$ptr + 2562928\n12  chromedriver                        0x0000000102752f98 cxxbridge1$str$ptr + 2575932\n13  chromedriver                        0x00000001027302c4 cxxbridge1$str$ptr + 2433384\n14  chromedriver                        0x0000000102753810 cxxbridge1$str$ptr + 2578100\n15  chromedriver                        0x00000001027212f0 cxxbridge1$str$ptr + 2371988\n16  chromedriver                        0x000000010277357c cxxbridge1$str$ptr + 2708512\n17  chromedriver                        0x0000000102773708 cxxbridge1$str$ptr + 2708908\n18  chromedriver                        0x000000010278293c cxxbridge1$str$ptr + 2770912\n19  libsystem_pthread.dylib             0x0000000185f2af94 _pthread_start + 136\n20  libsystem_pthread.dylib             0x0000000185f25d34 thread_start + 8", "trace": "self = <Test.test_E2E.TestEmbibe object at 0x1054b3e10>\n\n    @pytest.mark.usefixtures(\"setup\", \"log_on_failure\")\n    @pytest.mark.xfail\n    def test_sub_learn_chapters(self):\n        log = self.getLogger()\n        self.test_sign_in_password()\n        learn = LearnHomePage(self.driver)\n>       learn.sub_learn_chapter()\n\nTest/test_E2E.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObject/learn_home_page.py:325: in sub_learn_chapter\n    self.driver.find_element(*LearnHomePage.ptr).click()\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1057e0210>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...000185f2af94 _pthread_start + 136\\\\n20  libsystem_pthread.dylib             0x0000000185f25d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (170, 550). Other element would receive the click: <iframe frameborder=\"0\" allowfullscreen=\"\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" title=\"WHAT IS PHYSICS?\" width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/Y-NQOJ3Uz4w?autoplay=0&amp;mute=0&amp;controls=1&amp;origin=https%3A%2F%2Fwww.embibe.com&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;iv_load_policy=3&amp;modestbranding=1&amp;enablejsapi=1&amp;widgetid=1&amp;forigin=https%3A%2F%2Fwww.embibe.com%2Flearn%2Fsummary%2F606c4f964a9cbc2ab676048b%3Flearnmap_id%3D606ad10b3d96fbb0f3ee070e%252FManipur%2BBoard%252F11th%2BManipur%2BBoard%252FPhysics%252FMechanics%252FPhysical%2BWorld&amp;aoriginsup=1&amp;vf=6\" id=\"widget2\" data-gtm-yt-inspected-14=\"true\"></iframe>\nE         (Session info: chrome=135.0.7049.115)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010278aa54 cxxbridge1$str$ptr + 2803960\nE       1   chromedriver                        0x0000000102782cf0 cxxbridge1$str$ptr + 2771860\nE       2   chromedriver                        0x00000001022ce864 cxxbridge1$string$len + 93028\nE       3   chromedriver                        0x000000010231af3c cxxbridge1$string$len + 406076\nE       4   chromedriver                        0x00000001023194a8 cxxbridge1$string$len + 399272\nE       5   chromedriver                        0x00000001023172bc cxxbridge1$string$len + 390588\nE       6   chromedriver                        0x00000001023166b8 cxxbridge1$string$len + 387512\nE       7   chromedriver                        0x000000010230b01c cxxbridge1$string$len + 340764\nE       8   chromedriver                        0x000000010230aaa8 cxxbridge1$string$len + 339368\nE       9   chromedriver                        0x0000000102356480 cxxbridge1$string$len + 649088\nE       10  chromedriver                        0x00000001023097ec cxxbridge1$string$len + 334572\nE       11  chromedriver                        0x000000010274fccc cxxbridge1$str$ptr + 2562928\nE       12  chromedriver                        0x0000000102752f98 cxxbridge1$str$ptr + 2575932\nE       13  chromedriver                        0x00000001027302c4 cxxbridge1$str$ptr + 2433384\nE       14  chromedriver                        0x0000000102753810 cxxbridge1$str$ptr + 2578100\nE       15  chromedriver                        0x00000001027212f0 cxxbridge1$str$ptr + 2371988\nE       16  chromedriver                        0x000000010277357c cxxbridge1$str$ptr + 2708512\nE       17  chromedriver                        0x0000000102773708 cxxbridge1$str$ptr + 2708908\nE       18  chromedriver                        0x000000010278293c cxxbridge1$str$ptr + 2770912\nE       19  libsystem_pthread.dylib             0x0000000185f2af94 _pthread_start + 136\nE       20  libsystem_pthread.dylib             0x0000000185f25d34 thread_start + 8\n\n../../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "c49f2d8a-3553-44be-a868-17bba3dbe042-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "2f3d3ea6-3357-4aa3-bbdb-7b6eacaf07ae-attachment.txt", "type": "text/plain"}], "start": 1747036569045, "stop": 1747036586404, "uuid": "733ce089-a6e9-4c85-b055-d8b414c6d680", "historyId": "450e0cc3138b977396a4aa757e91cbbe", "testCaseId": "450e0cc3138b977396a4aa757e91cbbe", "fullName": "Test.test_E2E.TestEmbibe#test_sub_learn_chapters", "labels": [{"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "Test"}, {"name": "suite", "value": "test_E2E"}, {"name": "subSuite", "value": "TestEmbibe"}, {"name": "host", "value": "LM0010069"}, {"name": "thread", "value": "2333-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test.test_E2E"}]}